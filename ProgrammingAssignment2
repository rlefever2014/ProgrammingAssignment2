
<!-- -->

    makeVector <- function(x = numeric()) {
            m <- NULL
            set <- function(y) {
                    x <<- y
                    m <<- NULL
            }
            get <- function() x
            setmean <- function(mean) m <<- mean
            getmean <- function() m
            list(set = set, get = get,
                 setmean = setmean,
                 getmean = getmean)
    }

   mackCacheMatrix < - function (m=matrix()) {
   i < - NULL
   set <-function (matrix){
   m<<- matrix
   i<<-NULL
   
   }
   get <-function (){
   m
   setInverse <- function (inverse){
   i <<-inverse
   }
   getInverse <- function (){
   i
   }
   list(sest=set,get=get,setInverse=setinverse,getInverse=getInverse)
   
   
   
   }
The following function calculates the mean of the special "vector"
created with the above function. However, it first checks to see if the
mean has already been calculated. If so, it `get`s the mean from the
@@ -50,18 +56,18 @@ cache and skips the computation. Otherwise, it calculates the mean of
the data and sets the value of the mean in the cache via the `setmean`
function.

    cachemean <- function(x, ...) {
            m <- x$getmean()
            if(!is.null(m)) {
                    message("getting cached data")
                    return(m)
            }
            data <- x$get()
            m <- mean(data, ...)
            x$setmean(m)
            m
    cacheSolve <- function (x,...){
  m <- x$getInverse()
  if (!is.null(m)){
  message("getting cache data")
  return(m)
  
  }
  data <-x$get()
  m<- solve (data) %% data
  x$setInverse
  m
    }

### Assignment: Caching the Inverse of a Matrix

Matrix inversion is usually a costly computation and there may be some
